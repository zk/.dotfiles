{"mode":"editor","version":1,"windowDimensions":{"x":103,"y":48,"width":1024,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/zk/zaarly/wireapp/src/clj/wire","buffers":[{"text":"(ns wire.entry\n  (:use [compojure.core :only (defroutes ANY GET POST context)]\n        (ring.middleware\n          file\n          file-info\n          session\n          params\n          nested-params\n          multipart-params\n          keyword-params)\n        [ring.middleware.session.cookie :only (cookie-store)])\n  (:require [compojure.route :as cr]\n            [nsfw.util :as util]\n            [nsfw.env :as env]\n            [nsfw.html :as html]\n            [nsfw.http :as http]\n            [wire.config :as config]\n            [wire.metrics :as metrics]\n            [wire.admin :as admin]\n            [wire.site.customer :as customer]\n            [wire.gh-auth :as gh-auth]\n            [nsfw.mongo :as mongo]\n            [somnium.congomongo :refer (set-write-concern)]\n            [somnium.congomongo.config :refer (*mongo-config*)]\n            [clj-exceptional :as cx]\n            [wire.onboarding :as onboarding]\n            [wire.api :as api]\n            [wire.api.common :refer (render-json)]\n            [ring.util.response :refer (redirect)]\n            [clojure.string :as str])\n  (:import [com.fasterxml.jackson.core JsonParseException]))\n\n(when config/mongo-url\n  (mongo/connect! config/mongo-url)\n  (set-write-concern *mongo-config* :safe))\n\n;; Create indexes\n(when config/mongo-url\n  (->> [:sellers :auth-token\n        :sellers :email\n\n        :charges :customer-id\n        :charges :seller-id\n\n        :customers :seller-id\n        :customers :email\n\n        :transaction-log :customer-id\n        :transaction-log :seller-id\n\n        :seller-info :seller-id\n\n        :seller-bank-account :seller-id\n\n        :jobs :trigger-ts\n        :jobs :locked-ts\n        :jobs :failed-ts\n        :jobs :completed-ts\n\n        :log :seller-id\n        :log :customer-id\n        :log :charge-id]\n       (partition 2)\n       (map #(mongo/add-index! (first %) [(second %)]))\n       doall))\n\n(def session-store\n  (cookie-store\n    {:key (env/str :session-key)\n     :domain \".sfs.herokuapp.com\"}))\n\n(defn gen-key [{:keys [seller phone-number]}]\n  (str seller \"-\" phone-number))\n\n(defn gen-url [key]\n  (str \"http://localhost:5000\"\n       \"/pay-invoice/\"\n       key))\n\n(defroutes _routes\n  (var onboarding/routes)\n  (var customer/routes)\n\n  (context \"/api\" [] (var api/routes))\n  (var gh-auth/routes)\n  (context \"/admin\" [] (var admin/routes))\n\n  (POST \"/balanced-callback\" [] (fn [r]\n                                  (mongo/insert! :balanced-callback-payloads\n                                    {:timestamp (util/now)\n                                     :payload (pr-str r)})))\n\n  (GET \"/hash\" [] config/githash)\n\n  (cr/not-found (fn [r] customer/four-oh-four)))\n\n(defn spy [h]\n  (fn [r]\n    (if (-> r :params :spy)\n      {:body\n       (str \"Request:\\n\"\n            r\n            \"\\n\\n\"\n            \"Response\\n\"\n            (h r))}\n      (h r))))\n\n(defn json-content? [r]\n  (when-let [ct (-> r :headers (get \"content-type\"))]\n    (.contains ct \"application/json\")))\n\n(defn decode-json-mw [h]\n  (fn [r]\n    (if (json-content? r)\n      (try\n        (let [json-body (-> r util/response-body util/from-json)]\n          (h (assoc r :json-body json-body)))\n        (catch JsonParseException e\n          (render-json\n            {:status 400}\n            {:message \"Problems parsing JSON\"})))\n      (h r))))\n\n(defn enable-mw [h mw enable?]\n  (fn [r]\n    (if enable?\n      ((mw h) r)\n      (h r))))\n\n(defn javascript? [r]\n  (when-let [ct (-> r :headers (get \"Content-Type\"))]\n    (.contains ct \"text/javascript\")))\n\n(defn cache-assets [h]\n  (fn [r]\n    (let [res (h r)]\n      (cond\n        (javascript? res) (assoc-in res [:headers \"Cache-Control\"] \"public, max-age=31536000\")\n        :else res))))\n\n(defn force-https-heroku [h]\n  (fn [{:keys [server-name uri server-port query-string scheme] :as r}]\n    (if (= \"https\" (-> r :headers (get \"x-forwarded-proto\")))\n      (h r)\n      (let [url (str config/base-url\n                     uri\n                     (when query-string\n                       (str \"?\" query-string)))]\n        {:status  302\n         :headers {\"Location\" url}}))))\n\n(defn wrap-commit-hash-header [h]\n  (fn [r]\n    (assoc-in (h r) [:headers \"x-wire-commit-hash\"] config/githash)))\n\n(defn track-request-response [h]\n  (fn [req]\n    (let [start (util/now)\n          resp (h req)\n          delta (- (util/now) start)\n          uri (-> req :uri)]\n      (metrics/gauge\n        (str config/metrics-prefix\n             \".req-resp-wall\"\n             (if (= \"/\" uri)\n               \"._root\"\n               (-> req :uri (str/replace #\"/\" \".\"))))\n        delta)\n      resp)))\n\n(def routes\n  (-> _routes\n      spy\n      wrap-commit-hash-header\n      wrap-keyword-params\n      wrap-nested-params\n      wrap-params\n      http/decode-edn-mw\n      decode-json-mw\n      (wrap-session {:store session-store})\n      (wrap-file \"resources/public\" {:allow-symlinks? true})\n      wrap-file-info\n      (enable-mw cx/wrap-exceptional-rethrow config/exceptional-key)\n      (enable-mw force-https-heroku config/force-https-redirect)\n      track-request-response))\n","markers":{"markers":{"1":{"id":1,"range":[[9,25],[9,25]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"32":{"id":32,"range":[[170,0],[184,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{"class":"fold","displayBufferId":7},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/zaarly/wireapp/src/clj/wire/entry.clj","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0d3186115191429b0ef3b9caac8baf6b0c57c42c","deserializer":"TextBuffer"},{"text":"","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":14},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"modifiedWhenLastPersisted":false,"deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":6,"softTabs":true,"displayBuffer":{"id":7,"softWrap":false,"editorWidthInChars":96,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/zaarly/wireapp/src/clj/wire/entry.clj","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"deserializer":"TimecopView","uri":"atom://timecop"},{"id":14,"softTabs":true,"displayBuffer":{"id":15,"softWrap":false,"editorWidthInChars":98,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/zk/zaarly/wireapp/src/clj/wire/entry.clj","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/zk/zaarly/wireapp/src/clj/wire/entry.clj":1398658133586},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":10687},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/zk/zaarly/wireapp/src/clj/wire","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}