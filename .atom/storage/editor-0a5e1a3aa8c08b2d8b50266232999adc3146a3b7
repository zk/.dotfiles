{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/zk/napplelabs/inky","buffers":[{"text":"(ns inky.common\n  (:require [clojure.string :as str]\n            [inky.util :as util]\n            [inky.config :as config]))\n\n(def inky-version\n  (try\n    (let [source (slurp \"project.clj\")\n          forms (read-string (str \"[\" source \"]\"))]\n      (->> forms\n           (filter #(= 'defproject (first %)))\n           first\n           (drop 2)\n           first))\n    (catch java.io.FileNotFoundException e\n      \"UNKNOWN\")))\n\n(defn render-compiled [hash]\n  [:html5\n   [:head]\n   [:body\n    [:div.sketch]\n    [:script {:type \"text/javascript\"\n              :src (str \"http://f.inky.cc/\" hash \"/code.js\")}]]])\n\n(defn parse-source-meta\n  \"Parse meta info from source string, such as namespace and ns doc\n   string.\"\n  [source]\n  (try\n    (let [forms (read-string (str \"[\" source \"]\"))\n          ns (->> forms\n                  (filter #(and (coll? %) (= 'ns (first %))))\n                  first)\n          doc (and (coll? ns)\n                   (> (count ns) 2)\n                   (string? (nth ns 2))\n                   (nth ns 2))]\n      {:ns (second ns)\n       :doc doc})\n    (catch Exception e {})))\n\n(defn safe-slurp [s]\n  \"Like slurp, but doesn't throw an exception when file not found.\"\n  (when s\n    (try\n      (slurp s)\n      (catch java.io.FileNotFoundException e nil))))\n\n(def ga-tag\n  [:script (str \"(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n  ga('create', '\" config/ga-tracking-id \"', '\" config/ga-tracking-host \"');\n  ga('send', 'pageview');\")])\n\n(defn $layout [{:keys [content body-class head]}]\n  [:html5\n   (-> [:head\n        [:meta {:name \"viewport\" :content \"width=768px\"}]\n        [:link {:rel :stylesheet :href \"http://fonts.googleapis.com/css?family=PT+Serif\" :type \"text/css\"}]\n        [:link {:rel :stylesheet :href \"/css/app.css\"}]]\n       (concat head)\n       vec)\n   [:body\n    (when body-class\n      {:class body-class})\n    [:div.sticky-footer-wrap\n     [:div.container\n      [:div.row\n       [:div.col-sm-12\n        [:div.row\n         [:header.navbar\n          [:div\n           [:a.navbar-brand {:href \"/\"}\n            [:i.icon-rocket] \"inky.cc\"]\n           [:span.navbar-text \"/ sketch in cljs\"]]]\n         [:div.col-sm-12\n          content]]]]]]\n    [:footer\n     [:div.container\n      [:div.row\n       [:div.col-sm-121\n        \"inky.cc is brought to you by \"\n        [:a {:href \"https://twitter.com/heyzk\"} \"@heyzk\"]]]]]\n    (when ga-tag\n      ga-tag)]])\n","markers":{"markers":{"1":{"id":1,"range":[[37,10],[37,10]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":243,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/inky/src/clj/inky/common.clj","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"534c09d24265452e065a2890f009c21090293520","deserializer":"TextBuffer"},{"text":"(ns inky.compile\n  (:require \n    [cljs.closure :as cljsc]\n    [cljs.env :as cljsenv]\n    [somnium.congomongo :as mon]\n    [inky.util :as util]\n    [inky.common :as common]\n    [slingshot.slingshot :refer (try+)]\n    [clj-http.client :as hcl]\n    [hiccup.page :as hp]\n    [inky.config :as config]\n    [inky.s3 :as s3]\n    [clojure.java.shell :as sh]))\n\n(defn gist-data [gist-id]\n  (try+\n    (let [resp (hcl/get (str \"https://api.github.com/gists/\" gist-id)\n                 {:query-params {:client_id config/gh-client-id\n                                 :client_secret config/gh-client-secret}})]\n      (let [body (->> resp\n                   :body\n                   util/from-json)\n            {:keys [login avatar_url html_url]} (:user body)]\n        {:source (->> body\n                   :files\n                   (filter #(or (.endsWith (str (first %)) \".cljs\")\n                              (.endsWith (str (first %)) \".clj\")))\n                   first\n                   second\n                   :content)\n         :public-gist (:public body)\n         :user {:login login\n                :avatar-url avatar_url\n                :html-url html_url}\n         :success true}))\n    (catch [:status 403] _\n      ;; rate limit error\n      (println \"Rate limit hit fetching gist id:\" gist-id)\n      {:success false :error-cause \"Rate limit hit fetching gist.\" :status 403})\n    (catch [:status 404] _\n      {:success false :status 404})))\n\n(defn compile-cljs [hash filename]\n  (try\n    {:success true\n     :return (binding [cljsenv/*compiler* (atom {})]\n               (cljsc/build\n                 filename\n                 {:optimizations :advanced\n                  :pretty-print false\n                  :output-to (str \"/tmp/inky/\" hash \"/code.js\")\n                  :output-dir (str \"/tmp/inky/\" hash)\n                  :libs [\"\"]}))}\n    (catch Exception e\n      {:success false\n       :error-cause (str e)})))\n\n(defn next-job!\n  \"Atomically grabs and locks next job by setting the `started` field\n  to current time (ms).\"\n  []\n  (let [job (mon/fetch-and-modify\n              :compile-jobs\n              {:succeeded nil :started nil}\n              {:$set {:started (util/now)}}\n              :sort {:created 1}\n              :return-new? true)]\n    job))\n\n(defn compile-next-job! [worker-id]\n  (let [{:keys [gist-id] :as job} (next-job!)\n        uuid (util/uuid)\n        dir (str \"/tmp/inky/\" uuid)]\n    (when job\n      (try\n        (let [gist-resp (gist-data gist-id)]\n          (if-not (:success gist-resp)\n            (mon/update! :compile-jobs\n              job\n              {:$set {:public-gist (:public-gist gist-resp)\n                      :failed (util/now)\n                      :error-cause (:error-cause gist-resp)}})\n            (do\n              (println worker-id \"Compiling\" gist-id)\n              (let [source (:source gist-resp)\n                    source-dir (str \"/tmp/inky/\" uuid)\n                    filename (str source-dir \"/code.cljs\")]\n                (when (.exists (java.io.File. dir))\n                  (sh/sh \"rm\" \"-rf\" dir))\n                (.mkdirs (java.io.File. dir))\n                (spit filename source)\n                (let [compile-res (compile-cljs uuid filename)]\n                  (println worker-id compile-res)\n                  (s3/put-string\n                    (str gist-id \"/meta.edn\")\n                    (pr-str\n                      (merge\n                        (common/parse-source-meta source)\n                        {:compile-res compile-res}\n                        gist-resp\n                        {:created (util/now)\n                         :inky-version common/inky-version\n                         :gist-id gist-id\n                         :login (-> gist-resp :user :login)})))\n                  (s3/upload-file\n                    (str dir \"/code.js\")\n                    (str gist-id \"/code.js\"))\n                  (s3/put-string\n                    (str gist-id \"/code.html\")\n                    (hp/html5 (rest (common/render-compiled gist-id)))\n                    {:content-type \"text/html;charset=utf-8\"}))\n                (println worker-id \"done compiling\" gist-id)\n                (mon/update! :compile-jobs\n                  job\n                  {:$set {:public-gist (:public-gist gist-resp)\n                          :succeeded (util/now)}})))))\n        (catch Exception e\n          (println worker-id e)\n          (.printStackTrace e)\n          (mon/update! :compile-jobs\n            job\n            {:$set {:failed (util/now)\n                    :error-cause (str e)}}))\n        (finally\n          (when (.exists (java.io.File. dir))\n            (sh/sh \"rm\" \"-rf\" dir)))))))\n\n(defn run-worker! [worker-id]\n  (while true\n    (compile-next-job! worker-id)\n    (Thread/sleep 100)))\n\n(comment\n  (compile-next-job! \"WORKERONE\")\n  (run-worker! \"WORKERONE\")\n\n  (defn _compiled [job]\n    (mon/update! :compile-jobs job {:$set {:succeeded (util/now)}}))\n\n  (defn _print-jobs []\n    (let [jobs (mon/fetch :compile-jobs)]\n      (doseq [j jobs]\n        (println j))))\n\n  (defn _reset-jobs-db []\n    (mon/drop-coll! :compile-jobs))\n\n  #_(_reset-jobs-db)\n\n  (defn _clear-jobs []\n    (let [jobs (mon/fetch :compile-jobs)]\n      (doseq [j jobs]\n        (mon/update! :compile-jobs j (dissoc j :succeeded :started)))))\n\n  (defn _ins-job [j]\n    (mon/insert! :compile-jobs j))\n\n  (_print-job)\n\n  (defn request-compile [login gist-id]\n    (mon/insert! :compile-jobs {:login login :gist-id gist-id :created (util/now)})\n    true)\n\n  )\n","markers":{"markers":{"1":{"id":1,"range":[[127,0],[130,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":247,"goalBufferRange":null},"deserializer":"Marker"},"8":{"id":8,"range":[[1,0],[12,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[20,0],[21,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[24,0],[29,28]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"oldRange":[[13,0],[39,37]],"newRange":[[13,0],[39,37]],"oldText":"(defn gist-data [gist-id]\n  (try+\n    (let [resp (hcl/get (str \"https://api.github.com/gists/\" gist-id)\n                 {:query-params {:client_id config/gh-client-id\n                                 :client_secret config/gh-client-secret}})]\n      (let [body (->> resp\n                      :body\n                      util/from-json)\n            {:keys [login avatar_url html_url]} (:user body)]\n        {:source (->> body\n                      :files\n                      (filter #(or (.endsWith (str (first %)) \".cljs\")\n                                   (.endsWith (str (first %)) \".clj\")))\n                      first\n                      second\n                      :content)\n         :public-gist (:public body)\n         :user {:login login\n                :avatar-url avatar_url\n                :html-url html_url}\n         :success true}))\n    (catch [:status 403] _\n      ;; rate limit error\n      (println \"Rate limit hit fetching gist id:\" gist-id)\n      {:success false :error-cause \"Rate limit hit fetching gist.\" :status 403})\n    (catch [:status 404] _\n      {:success false :status 404})))","newText":"(defn gist-data [gist-id]\n  (try+\n    (let [resp (hcl/get (str \"https://api.github.com/gists/\" gist-id)\n                 {:query-params {:client_id config/gh-client-id\n                                 :client_secret config/gh-client-secret}})]\n      (let [body (->> resp\n                   :body\n                   util/from-json)\n            {:keys [login avatar_url html_url]} (:user body)]\n        {:source (->> body\n                   :files\n                   (filter #(or (.endsWith (str (first %)) \".cljs\")\n                              (.endsWith (str (first %)) \".clj\")))\n                   first\n                   second\n                   :content)\n         :public-gist (:public body)\n         :user {:login login\n                :avatar-url avatar_url\n                :html-url html_url}\n         :success true}))\n    (catch [:status 403] _\n      ;; rate limit error\n      (println \"Rate limit hit fetching gist id:\" gist-id)\n      {:success false :error-cause \"Rate limit hit fetching gist.\" :status 403})\n    (catch [:status 404] _\n      {:success false :status 404})))","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[0,0],[11,41]],"newRange":[[0,0],[11,33]],"oldText":"(ns inky.compile\n  (:require [cljs.closure :as cljsc]\n            [cljs.env :as cljsenv]\n            [somnium.congomongo :as mon]\n            [inky.util :as util]\n            [inky.common :as common]\n            [slingshot.slingshot :refer (try+)]\n            [clj-http.client :as hcl]\n            [hiccup.page :as hp]\n            [inky.config :as config]\n            [inky.s3 :as s3]\n            [clojure.java.shell :as sh]))","newText":"(ns inky.compile\n  (:require [cljs.closure :as cljsc]\n    [cljs.env :as cljsenv]\n    [somnium.congomongo :as mon]\n    [inky.util :as util]\n    [inky.common :as common]\n    [slingshot.slingshot :refer (try+)]\n    [clj-http.client :as hcl]\n    [hiccup.page :as hp]\n    [inky.config :as config]\n    [inky.s3 :as s3]\n    [clojure.java.shell :as sh]))","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"patches":[{"oldRange":[[1,12],[1,12]],"newRange":[[1,12],[2,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[2,0],[2,0]],"newRange":[[2,0],[2,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/inky/src/clj/inky/compile.clj","modifiedWhenLastPersisted":true,"digestWhenLastPersisted":"aa4af11dbb52d671e30d4f302d26fb84411f43cb","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"deserializer":"SettingsView","version":2,"activePanelName":"Settings","uri":"atom://config"},{"id":243,"softTabs":true,"displayBuffer":{"id":244,"softWrap":false,"editorWidthInChars":null,"scrollTop":140,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/inky/src/clj/inky/common.clj","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":247,"softTabs":true,"displayBuffer":{"id":248,"softWrap":false,"editorWidthInChars":null,"scrollTop":1871,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/inky/src/clj/inky/compile.clj","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"deserializer":"repl-view","uri":"nrepl://localhost:7888"},{"deserializer":"StyleguideView","collapsedSections":[],"uri":"atom://styleguide"}],"activeItemUri":"/Users/zk/napplelabs/inky/src/clj/inky/compile.clj","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/zk/napplelabs/inky/src/clj/inky/common.clj":1404343303928,"/Users/zk/napplelabs/inky/src/clj/inky/compile.clj":1404343305271},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":85657},"tree-view":{"directoryExpansionStates":{"src":{"clj":{"inky":{}}}},"selectedPath":"/Users/zk/napplelabs/inky/src/clj/inky/local.clj","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":["object","clj-editor?"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"atom-clojure":{"nrepl-uris":["nrepl://localhost:7888"]}}}