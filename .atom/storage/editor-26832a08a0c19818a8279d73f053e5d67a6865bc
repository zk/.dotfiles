{"mode":"editor","version":1,"windowDimensions":{"x":3,"y":22,"width":1440,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/zk/napplelabs/atom","buffers":[{"text":"(ns cla.styleguide\n  (:require\n    [cla.atom :as atom]\n    [om.core :as om :include-macros true]\n    [om-tools.dom :as dom :include-macros true]\n    [om-tools.core :include-macros true :refer-macros [defcomponent]]\n    [cljs.reader :as cljs-reader]\n\n    [cla.repl-view :as repl-view]))\n\n(defn other-widget [state owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/h2 (:foo state)))))\n\n(defn section [{:keys [title]} & children]\n  (dom/div {:class \"atom-clojure styleguide-section\"}\n    (dom/h2 title)\n    children))\n\n(defn example [{:keys [title desc]} & children]\n  (dom/div {:class \"styleguide-example\"}\n    (dom/h3 title)\n    (when desc\n      (dom/p desc))\n    (dom/div {:class \"styleguide-example-content\"}\n      children)))\n\n(def exception\n  [{:ex \"class java.lang.ArithmeticException\", :id \"7ad22207-813e-4fa8-a732-d1c49a010ff2\", :root-ex \"class java.lang.ArithmeticException\", :session \"23c533e9-e8c7-4a9b-aa7c-fb2924dbfa0e\", :status [\"eval-error\"]}\n   {:err \"ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:156)\\n\", :id \"7ad22207-813e-4fa8-a732-d1c49a010ff2\", :session \"23c533e9-e8c7-4a9b-aa7c-fb2924dbfa0e\"}\n   {:id \"7ad22207-813e-4fa8-a732-d1c49a010ff2\", :session \"23c533e9-e8c7-4a9b-aa7c-fb2924dbfa0e\", :status [\"done\"]}\n   {:id \"7ad22207-813e-4fa8-a732-d1c49a010ff2\", :ns \"inky.entry\", :session \"23c533e9-e8c7-4a9b-aa7c-fb2924dbfa0e\",\n    :value \"{:msg \\\"java.lang.ArithmeticException: Divide by zero\\\", :stacktrace ({:nativeMethod false, :methodName \\\"divide\\\", :lineNumber 156, :fileName \\\"Numbers.java\\\", :className \\\"clojure.lang.Numbers\\\", :class java.lang.StackTraceElement} {:nativeMethod false, :methodName \\\"divide\\\", :lineNumber 3691, :fileName \\\"Numbers.java\\\", :className \\\"clojure.lang.Numbers\\\", :class java.lang.StackTraceElement} {:nativeMethod false, :methodName \\\"invoke\\\", :lineNumber 410, :fileName \\\"/Users/zk/napplelabs/inky/src/clj/inky/entry.clj\\\", :className \\\"inky.entry$eval1606\\\", :class java.lang.StackTraceElement}), :atom-clojure-stacktrace? true}\"}\n   {:id \"7ad22207-813e-4fa8-a732-d1c49a010ff2\", :session \"23c533e9-e8c7-4a9b-aa7c-fb2924dbfa0e\", :status [\"done\"]}])\n\n(defn widget\n  [{:keys [connections]} owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/div {:class \"atom-styleguide-view\"}\n        (dom/h1 \"Styleguide\")\n        (section {:title \"NRepl\"}\n          (example\n            {:title \"Repl Entry\"}\n            (om/build (repl-view/entry-widget \"nrepl://localhost:1234\" \"7ad22207-813e-4fa8-a732-d1c49a010ff2\")\n              {:history {\"nrepl://localhost:1234\"\n                         {:order [\"7ad22207-813e-4fa8-a732-d1c49a010ff2\"]\n                          :results {\"7ad22207-813e-4fa8-a732-d1c49a010ff2\" exception}}}}))\n          (example\n            {:title \"Repl Widget\"\n             :desc \"Full repl view\"}\n            (om/build (repl-view/widget \"nrepl://localhost:1234\")\n              {:history {\"nrepl://localhost:1234\"\n                         {:order [\"one\" \"two\" \"three\"]\n                          :results {\"one\" [{:id \"one\" :value \"the quick brown\"}]\n                                    \"two\" [{:id \"two\" :value \"fox jumps over\"}]\n                                    \"three\" [{:id \"three\" :value \"the lazy dog\"}]}}}}))\n          (example\n            {:title \"Exceptions\"}\n            (om/build (repl-view/widget \"nrepl://localhost:1234\")\n              {:history {\"nrepl://localhost:1234\"\n                         {:order [\"7ad22207-813e-4fa8-a732-d1c49a010ff2\"]\n                          :results {\"7ad22207-813e-4fa8-a732-d1c49a010ff2\" exception}}}}))\n          )))\n    om/IDidUpdate\n    (did-update [this next-props next-state])))\n\n(defn view [state]\n  (atom/make-view\n    {:title \"Atom-Clojure Styleguide\"\n     :init (fn [el]\n             (om/root widget\n               state\n               {:target el}))\n     :scrollable? true}))\n","markers":{"markers":{"1":{"id":1,"range":[[39,2],[39,2]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6135,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[38,0],[38,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[34,81],[34,81]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[39,0],[39,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[74,0],[74,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"23":{"id":23,"range":[[74,0],[74,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"54":{"id":54,"range":[[56,40],[56,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"55":{"id":55,"range":[[58,36],[58,40]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"56":{"id":56,"range":[[58,61],[58,77]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"57":{"id":57,"range":[[56,46],[56,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"58":{"id":58,"range":[[59,36],[59,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"59":{"id":59,"range":[[59,65],[59,79]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"60":{"id":60,"range":[[57,48],[57,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"61":{"id":61,"range":[[58,44],[58,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"62":{"id":62,"range":[[58,48],[58,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"63":{"id":63,"range":[[59,50],[59,56]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"64":{"id":64,"range":[[66,10],[66,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"65":{"id":65,"range":[[66,10],[66,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"66":{"id":66,"range":[[66,10],[66,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/styleguide.cljs","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"547af7f933100dd495868f6cad3683f91b6a07a6","deserializer":"TextBuffer"},{"text":"(ns cla.plugin\n  (:require\n    [cla.atom :as atom]\n    [om.core :as om :include-macros true]\n    [om-tools.dom :as dom :include-macros true]\n    [clojure.string :as str]\n    [cla.main :as main]\n    [cla.struct :as struct]\n    [cla.nrepl :as nrepl]\n    [cla.repl-view :as repl-view]\n    [cla.conn-view :as conn-view]\n    [cla.styleguide :as styleguide-view]\n    [cljs.reader :as cljs-reader]\n    [clojure.browser.repl]))\n\n;; nrepl\n\n(def state (atom\n             {:connections {}\n              :history {}}))\n\n(def jQuery (js/require \"jQuery\"))\n\n(defn open-nrepl [uri]\n  (repl-view/view uri state))\n\n(defn debug-widget [{:keys [connections] :as state} owner]\n  (dom/div {:class \"debug-atom-clojure\"}\n    (dom/h1 {:class \"header\"}\n      \"Atom-Clojure\")\n    (dom/ul {:class \"a-list\"}\n      (for [[k v] connections]\n        (dom/li\n          k)))\n    (dom/pre\n      (pr-str state))))\n\n(defn open-debug [uri]\n  (atom/make-view\n    {:title \"Debug Atom Clojure\"\n     :init\n     (fn [el]\n       (om/root debug-widget\n         state\n         {:target el}))}))\n\n(def TextBuffer (js/require \"text-buffer\"))\n(def DisplayBuffer (js/require \"src/display-buffer\"))\n(def TokenizedBuffer (js/require \"src/tokenized-buffer\"))\n(def Editor (js/require \"src/editor\"))\n(def TokenizedLine (js/require \"src/tokenized-line\"))\n(def Token (js/require \"src/token\"))\n\n(defn tokenize-lines [text]\n  (let [lines (if (re-find #\"\\n\" text)\n                (str/split text \"\\n\")\n                [text])\n        tokenized-lines\n        (->> lines\n          (map #(do\n                  (TokenizedLine.\n                    (clj->js\n                      {:tokens\n                       [(Token.\n                          (clj->js\n                            {:value %\n                             :scopes [\"source.clojure\"]}))]\n                       :lineEnding \"\\n\"\n                       :ruleStack []\n                       :startBufferColumn 0\n                       :fold false\n                       :tabLength 2\n                       :indentLevel 0})))))]\n    tokenized-lines))\n\n(defn conlog [& args]\n  (.log js/console (clj->js args)))\n\n(defn set-tokenize-lines [tb tls]\n  (aset tb \"tokenizedLines\"\n    (clj->js tls)))\n\n(defn handle-buffer-change [tb {:keys [old-range new-range old-text new-text] :as change}]\n  (set-tokenize-lines tb (tokenize-lines new-text)))\n\n(defn range->clj [r]\n  {:start (point->clj (.-start r))\n   :end (point->clj (.-end r))})\n\n(defn point->clj [p]\n  [(.-row p) (.-col p)])\n\n(def underscore (js/require \"underscore-plus\"))\n(def jQuery (js/require \"jQuery\"))\n\n(defn make-tokenized-buffer [text-buffer]\n  (let [tb (TokenizedBuffer. #js {:buffer text-buffer})]\n    (aset tb \"handleBufferChange\" (fn [e]\n                                    (handle-buffer-change tb\n                                      {:old-range (range->clj (.-oldRange e))\n                                       :old-text (.-oldText e)\n                                       :new-range (range->clj (.-newRange e))\n                                       :new-text (.-newText e)})))\n    (aset tb \"serialize\"\n      (fn [& args]\n        (conlog \"serialize called\" args)\n        (clj->js\n          {:bufferPath (.getPath (.-buffer tb))\n           :tabLength 2\n           :deserializer \"ClojureTokenizedBuffer\"})))\n    (aset tb \"resetTokenizedLines\"\n      (fn []\n        (conlog text-buffer)\n        (let [text (.getText text-buffer)]\n          (set-tokenize-lines tb (tokenize-lines text)))))\n    (aset tb \"lineForScreenRow\"\n      (fn [row]\n        (let [res (aget (.-tokenizedLines tb) row)]\n          (conlog \"line for screen row\" row res)\n          (or\n            res\n            (TokenizedLine. (clj->js {:tokens []\n                                      :lineEnding \"\\n\"\n                                      :ruleStack []\n                                      :startBufferColumn 0\n                                      :fold false\n                                      :tabLength 2\n                                      :indentLevel 0}))))))\n    (aset tb \"tokenizeInBackground\"\n      (fn []\n        (prn \"tokenizeInBackground\")))\n    (.resetTokenizedLines tb)\n    tb))\n\n(defn open-clojure [uri]\n  (let [text-buffer (TextBuffer. #js {:filePath uri})\n        _ (.loadSync text-buffer)\n        tokenized-buffer (make-tokenized-buffer text-buffer)\n        display-buffer (DisplayBuffer. #js {:tokenizedBuffer tokenized-buffer})\n        editor (Editor. #js {:buffer text-buffer :displayBuffer display-buffer})]\n    editor))\n\n(defn deserialize-tokenized-buffer [params]\n  (let [uri (.-filePath params)\n        text-buffer (TextBuffer. #js {:filePath uri})]\n    (make-tokenized-buffer text-buffer)))\n\n(defn open-connections []\n  (conn-view/view state))\n\n(defn open-styleguide []\n  (styleguide-view/view state))\n\n(defn open-repl-entry [uri]\n  (let [[_ host port id] (re-find #\"atom-clojure://repl-entry/([^/]*)/([^/]*)/([^/]*)\" uri)\n        nrepl-uri (str \"nrepl://\" host \":\" port)]\n    (repl-view/entry-view state nrepl-uri id)))\n\n(def fs (js/require \"fs-plus\"))\n\n;; Grammar\n\n(def Token (js/require \"src/token\"))\n\n(defn tokenize-line [line rule-stack first-line?]\n  (let [values (str/split line #\"\\s+\")\n        tokens (->> values\n                 (map #(Token. (clj->js {:value % :scopes []}))))\n        value line\n        tokens [(Token. (clj->js {:value value :scopes []}))]\n        ]\n    (clj->js {:tokens tokens :ruleStack []})))\n\n(def Grammar (js/require \"first-mate/lib/grammar\"))\n\n(def g (let [gr (Grammar.\n                  (.-syntax js/atom)\n                  (clj->js\n                    {:name \"Clojure Atom\"\n                     :fileTypes [\"cljs\" \"clj\" \"edn\"]\n                     :scopeName \"source.clojure\"}))]\n         (aset gr \"tokenizeLines\" (fn [] (prn \"tokenizeLines\")))\n         (aset gr \"tokenizeLine\"\n           (fn [text _ _]\n             #_(prn \"grammar tok line\" text)\n             (first (tokenize-lines text))))\n         gr))\n\n#_(.activate g)\n\n#_(.log js/console g)\n\n(defn deserialize-atom-clojure [params]\n  )\n\n(defn register-deserializers []\n  (.add (.-deserializers js/atom)\n    #js {:name \"repl-view\"\n         :deserialize\n         (fn [view-state params]\n           (let [uri (.-uri view-state)]\n             (repl-view/view uri state)))})\n  (.add (.-deserializers js/atom)\n    #js {:name \"atom-clojure\"\n         :deserialize\n         (fn [view-state params]\n           (conlog view-state params))}))\n\n;;;\n\n(defn update-order\n  [{:keys [order results] :as history}\n   {:keys [id] :as res}]\n  (if (get results id)\n    history\n    (assoc history :order (concat order [id]))))\n\n(defn update-results\n  [{:keys [order results] :as history}\n   {:keys [id] :as res}]\n  (update-in history [:results id]\n    concat [res]))\n\n(defn update-history [history res]\n  (-> history\n    (update-order res)\n    (update-results res)))\n\n(defn exception? [{:keys [ex]}]\n  ex)\n\n\n;;{:msg (str *e) :stacktrace (->> (.getStackTrace *e) (map str))}\n\n(defn on-nrepl-result [uri]\n  (fn [res]\n    (swap! state update-in [:history uri] update-history res)\n    (when (exception? res)\n      (doseq [c (-> @state :connections vals)]\n        (nrepl/send c {:op \"eval\"\n                       :code \"{:msg (str *e) :stacktrace (->> (.getStackTrace *e) (map bean)) :atom-clojure-stacktrace? true}\"\n                       :id (:id res) :session (:session res)})))))\n\n(defn connect-to [uri]\n  (swap! state update-in [:connections]\n    #(assoc % uri (nrepl/nrepl-chan uri (on-nrepl-result uri)))))\n\n(defn nrepl-connect-cmd []\n  (let [root-path (.getPath (.-project js/atom))\n        port-path (str root-path \"/.nrepl-port\")]\n    (.readFile fs port-path\n      (fn [err data]\n        (if err\n          (println \"Error reading port from \" port-path \"-- please start a repl in this project's directory.\")\n          (let [uri (str \"nrepl://localhost:\" data)]\n            (connect-to uri)\n            (atom/open-uri uri)))))))\n\n(defn debug-plugin-cmd []\n  (.open (.-workspace js/atom) \"atom-clojure-debug\"))\n\n(defn open-connections-cmd []\n  (.open (.-workspace js/atom) \"atom-clojure://connections\"))\n\n(defn open-styleguide-cmd []\n  (.open (.-workspace js/atom) \"atom-clojure://styleguide\"))\n\n(defn ed []\n  (.. js/atom -workspace getActiveEditor))\n\n(defn push-debug-cmd []\n  (swap! state assoc :history (cljs-reader/read-string (.getText (ed)))))\n\n(defn find-ns [text]\n  (-> (atom/get-text!)\n    cljs-reader/read-string\n    second\n    str))\n\n(defn flash-range [{:keys [start end]}]\n  (let [start-row (first start)\n        end-row (first end)\n\n        line-els\n        (->> (range start-row (inc end-row))\n          (map (fn [row]\n                 (.lineElementForScreenRow (.getActiveView (.-workspaceView js/atom)) row))))]\n    (doseq [jqe line-els]\n      (.stop jqe)\n      (.css jqe #js {:opacity 0.2})\n      (.animate jqe\n        #js {:opacity 1}\n        250\n        (fn []\n          (.css jqe #js {:opacity \"\"}))))))\n\n(defn eval-form-cmd []\n  (let [ns (-> (.getText (ed))\n             cljs-reader/read-string\n             second\n             str)\n        range (atom/selected-buffer-range)\n\n        {:keys [start end text] :as source-range}\n        (struct/root-form-source (main/context))\n\n        code (str\n               (->> \"\\n\"\n                 (repeat (first (:start range)))\n                 (apply str))\n               text)\n        include-ns? (if (re-find #\"^\\(ns\" code)\n                      false\n                      true)\n        path (.getPath (ed))\n        msg {:op :load-file :file code :file-path path :file-name path :id (nrepl/uuid)}\n        msg (if include-ns?\n              (assoc msg :ns ns)\n              msg)\n        cs (-> @state :connections vals)]\n    (if (> (count cs) 0)\n      (do\n        (flash-range source-range)\n        (doseq [c cs]\n          (nrepl/send c msg)))\n      (println \"No connections available, connect using nrepl:connect\"))))\n\n(defn flash-file []\n  (let [jqe (.-renderedLines (.getActiveView (.-workspaceView js/atom)))]\n    (.stop jqe)\n    (.css jqe #js {:opacity 0.2})\n    (.animate jqe\n      #js {:opacity 1}\n      250\n      (fn []\n        (.css jqe #js {:opacity \"\"})))))\n\n(defn eval-file-cmd []\n  (let [text (atom/get-text!)\n        ns (find-ns)\n        path (.getPath (ed))\n        msg {:op :load-file :file text :file-path path :file-name path :id (nrepl/uuid)}\n        cs (-> @state :connections vals)]\n    (if (> (count cs) 0)\n      (do\n        (flash-file)\n        (doseq [c cs]\n          (nrepl/send c msg)))\n      (println \"No connections available, connect using nrepl:connect\"))))\n\n(defn assoc-in-state [& args]\n  (apply swap! state assoc-in args))\n\n(defn update-in-state [& args]\n  (apply swap! state update-in args))\n\n(defn go-to-nrepl-cmd []\n  (let [current-pane (.getActivePane (.-workspace js/atom))\n        current-item (.getActiveItem current-pane)\n        {:keys [item pane]}\n        (->> (atom/get-panes!)\n          (mapcat (fn [pane]\n                    (->> (atom/get-items pane)\n                      (map #(hash-map :pane pane :item %)))))\n          (filter #(re-find #\"^nrepl:\" (.getTitle (:item %))))\n          first)]\n    (cond\n      (= current-item item) (when-let [lpi (:last-pane-item @state)]\n                              (.activateItem (:pane lpi) (:item lpi))\n                              (assoc-in-state [:last-pane-item] nil))\n\n      :else (when (and item pane)\n              ;; leak\n              (assoc-in-state [:last-pane-item] {:pane current-pane :item current-item})\n              (.activateItem pane item)))))\n\n(def commands\n  (-> {\"nrepl:connect\" nrepl-connect-cmd\n       \"clojure:debug-plugin\" debug-plugin-cmd\n       \"clojure:push-debug\" push-debug-cmd\n       \"nrepl:eval-form\" eval-form-cmd\n       \"nrepl:eval-file\" eval-file-cmd\n       \"nrepl:go-to-nrepl\" go-to-nrepl-cmd\n       \"nrepl:connections\" open-connections-cmd\n       \"atom-clojure:styleguide\" open-styleguide-cmd}\n    clj->js))\n\n;; URI Openers\n\n(defn handle-open-uri [uri]\n  (condp re-find uri\n    #\"atom-clojure-debug$\" (open-debug uri)\n    #\"^nrepl://\" (open-nrepl uri)\n    #\"atom-clojure://connections\" (open-connections)\n    #\"atom-clojure://styleguide\" (open-styleguide)\n    #\"atom-clojure://repl-entry\" (open-repl-entry uri)\n;    #\"\\.(edn|clj|cljs)$\" (open-clojure uri)\n    nil))\n\n(defn register-openers []\n  (.registerOpener (.-workspace js/atom) handle-open-uri))\n\n;;;\n\n\n(defn init-plugin []\n  (println \"Initializing Clojure Plugin\")\n  (register-deserializers))\n\n(defn activate-plugin [{:keys [nrepl-uris]}]\n  (println \"Activating Clojure Plugin\")\n  (register-openers)\n  (doseq [uri nrepl-uris]\n    (connect-to uri)))\n\n(defn serialize-plugin []\n  {:nrepl-uris\n   (->> @state\n     :connections\n     keys)})\n\n(aset js/module \"exports\"\n  #js {:init init-plugin\n       :activate #(activate-plugin (js->clj % :keywordize-keys true))\n       :commands commands\n       :serialize #(clj->js (serialize-plugin))})\n","markers":{"markers":{"1":{"id":1,"range":[[13,26],[13,26]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6139,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"706":{"id":706,"range":[[395,4],[395,54]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"707":{"id":707,"range":[[395,5],[395,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"708":{"id":708,"range":[[156,47],[156,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"709":{"id":709,"range":[[156,47],[156,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"710":{"id":710,"range":[[156,47],[156,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"711":{"id":711,"range":[[155,23],[155,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"712":{"id":712,"range":[[155,39],[155,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"713":{"id":713,"range":[[156,4],[156,45]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"717":{"id":717,"range":[[154,0],[154,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"718":{"id":718,"range":[[154,0],[154,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/plugin.cljs","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"cec78b83e238e558c74b99e9c4dc36ece809d137","deserializer":"TextBuffer"},{"text":"(ns cla.repl-view\n  (:require\n    [cla.atom :as atom]\n    [om.core :as om :include-macros true]\n    [om-tools.dom :as dom :include-macros true]\n    [om-tools.core :include-macros true :refer-macros [defcomponent]]\n    [cljs.reader :as cljs-reader]))\n\n(def jQuery (js/require \"jQuery\"))\n\n(declare data-widget)\n\n(defn string-widget [s]\n  (dom/span {:class \"data string\"}\n    \"\\\"\" s \"\\\"\"))\n\n(defn keyword-widget [kw]\n  (dom/span {:class \"data keyword\"}\n    (pr-str kw)))\n\n(defn map-widget [m]\n  (dom/div {:class \"data map\"}\n    \"{\"\n    (dom/ul\n      (for [[k v] m]\n        (dom/li\n          (data-widget k)\n          \" \"\n          (data-widget v))))\n    \"}\"))\n\n(defn vector-widget [vs]\n  (dom/div {:class \"data vector\"}\n    \"[\"\n    (dom/ul\n      (for [v vs]\n        (dom/li (data-widget v))))\n    \"]\"))\n\n(defn data-widget [v]\n  (cond\n    (string? v) (string-widget v)\n    (keyword? v) (keyword-widget v)\n    (vector? v) (vector-widget v)\n    (map? v) (map-widget v)\n    :else (dom/pre\n            (pr-str v))))\n\n;;;;\n\n(defn render-frame [{:keys [lineNumber className fileName methodName]}]\n  (let [clojure? (not (re-find #\"\\.java$\" fileName))]\n    (dom/li {:class (if clojure? \"clojure\" \"\")}\n      (cond\n        clojure? (str className \".\" methodName \" \" fileName \":\" lineNumber)\n        :else (str className \".\" methodName \" \" fileName \":\" lineNumber)\n        ))))\n\n(defn render-stacktrace [{:keys [stacktrace msg] :as res}]\n  (dom/div {:class \"stacktrace\"}\n    (dom/h3 \"Exception\")\n    (dom/p msg)\n    (dom/ul {:class \"stacktrace\"}\n      (for [frame stacktrace]\n        (render-frame frame)))))\n\n(defn render-message [{:keys [value out ex err]}]\n  (let [{:keys [atom-clojure-stacktrace?] :as res}\n        (try\n          (cljs-reader/read-string value)\n          (catch js/Error e\n            ;nothing!\n            ))]\n    (cond\n      atom-clojure-stacktrace? (render-stacktrace res)\n      :else (or value out ex err))))\n\n(defn toggle-raw [e owner state]\n  (.log js/console owner)\n  (om/set-state! owner :open (not (:open state))))\n\n(defn raw-view [msgs owner]\n  (reify\n    om/IInitState\n    (init-state [_] {:open false})\n    om/IRenderState\n    (render-state [this state]\n      (dom/div {:class \"raw-output\"}\n        (dom/div {:class \"toggle-raw\"\n                  :on-click #(toggle-raw % owner state)}\n          \"toggle raw\")\n        (dom/pre\n          {:class (if (:open state) \"\" \"hidden\")}\n          (->> msgs\n            (map pr-str)\n            (interpose \"\\n\\n\")\n            (apply str)))))))\n\n(defn uri-for-repl-entry [uri id]\n  (let [[_ host port] (re-find #\"nrepl://([^:]*):?(\\d*)\" uri)]\n    (str\n      \"atom-clojure://repl-entry/\"\n      host\n      \"/\"\n      port\n      \"/\"\n      id\n      )))\n\n(defn render-history [uri msgs]\n  (when true\n    (dom/li {:class \"repl-entry\"}\n      (dom/div {:class \"rendered-output\"}\n        (for [m msgs]\n          (render-message m)))\n      (dom/div {:class \"repl-entry-controls\"}\n        (dom/a {:class \"icon-file-symlink-file\"\n                :href \"#\"\n                :title \"Open Repl Entry\"\n                :on-click #(.open (.-workspace js/atom) (uri-for-repl-entry uri (:id (first msgs))))}))\n      #_(om/build raw-view msgs))))\n\n(defn scroll-to-bottom [el]\n  (let [jqe (jQuery el)]\n    (if (.is jqe \":visible\")\n      (do\n        (.stop jqe)\n        (.animate jqe\n          #js {:scrollTop (.-scrollHeight el)}\n          150\n          \"swing\"))\n      (.data jqe \"needsscroll\" true))))\n\n(defn widget [uri container]\n  (fn [{:keys [history]} owner]\n    (reify\n      om/IRender\n      (render [this]\n        (dom/div {:class \"repl-view\"}\n          (dom/ul\n            (let [history (get history uri)]\n              (for [h (->> (:order history)\n                        (map #(get (:results history) %)))]\n                (render-history uri h))))))\n      om/IDidUpdate\n      (did-update [this next-props next-state]\n        (scroll-to-bottom container)))))\n\n(defn entry-widget [nrepl-uri id]\n  (fn [{:keys [history]} owner]\n    (let [history (get history nrepl-uri)\n          msgs (get (:results history) id)]\n      (prn msgs)\n      (dom/div {:class \"repl-entry\"}\n        (dom/div {:class \"rendered-output\"}\n          (for [m msgs]\n            (render-message m)))\n        (data-widget msgs)))))\n\n(defn entry-view [state nrepl-uri id]\n  (atom/make-view\n    {:title (str \"Repl Entry \" id \" (\" nrepl-uri \")\")\n     :init (fn [el]\n             (om/root (entry-widget nrepl-uri id)\n               state\n               {:target el}))}))\n\n(defn view [uri state]\n  (atom/make-view\n    {:title (str uri)\n     :init (fn [el]\n             (om/root (widget uri el)\n               state\n               {:target el})\n             (let [jqe (jQuery el)]\n               (.on jqe \"focus\"\n                 (fn []\n                   (when (.data jqe \"needsscroll\")\n                     (.data jqe \"needsscroll\" false)\n                     (scroll-to-bottom el))))))\n     :scrollable? true\n     :serialize\n     (fn []\n       {:deserializer \"repl-view\"\n        :uri uri})}))\n","markers":{"markers":{"1":{"id":1,"range":[[32,2],[32,2]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6221,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"},"6":{"id":6,"range":[[115,23],[115,43]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[116,23],[116,46]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[117,22],[117,24]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[118,23],[118,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"33":{"id":33,"range":[[119,56],[119,99]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"34":{"id":34,"range":[[107,9],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"36":{"id":36,"range":[[107,9],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"37":{"id":37,"range":[[107,9],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"38":{"id":38,"range":[[107,9],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"39":{"id":39,"range":[[107,9],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"40":{"id":40,"range":[[109,0],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"41":{"id":41,"range":[[109,0],[109,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"42":{"id":42,"range":[[103,6],[103,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"43":{"id":43,"range":[[105,6],[105,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"49":{"id":49,"range":[[110,0],[110,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"57":{"id":57,"range":[[161,12],[161,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"58":{"id":58,"range":[[161,12],[161,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"59":{"id":59,"range":[[161,34],[161,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"60":{"id":60,"range":[[161,36],[161,37]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"61":{"id":61,"range":[[161,49],[161,51]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"64":{"id":64,"range":[[157,30],[157,30]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"74":{"id":74,"range":[[153,23],[153,34]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"78":{"id":78,"range":[[29,9],[29,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"79":{"id":79,"range":[[33,4],[33,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"80":{"id":80,"range":[[33,5],[33,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"81":{"id":81,"range":[[37,4],[37,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"82":{"id":82,"range":[[14,4],[14,7]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"83":{"id":83,"range":[[14,11],[14,14]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"84":{"id":84,"range":[[13,20],[13,32]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"85":{"id":85,"range":[[17,20],[17,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"86":{"id":86,"range":[[29,9],[29,9]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"87":{"id":87,"range":[[32,19],[32,31]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"93":{"id":93,"range":[[22,4],[22,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"94":{"id":94,"range":[[22,5],[22,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"95":{"id":95,"range":[[29,4],[29,6]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"96":{"id":96,"range":[[27,10],[27,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/repl_view.cljs","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"47e2c2d1c320b3a95afcb9dba223ff075a28b030","deserializer":"TextBuffer"},{"text":"// The ui-variables file is provided by base themes provided by Atom.\n//\n// See https://github.com/atom/atom-dark-ui/blob/master/stylesheets/ui-variables.less\n// for a full listing of what's available.\n@import \"ui-variables\";\n\n.clojure {\n}\n\n.scrollable-view {\n  overflow: scroll;\n}\n\n.repl-view {\n  font-family: monospace;\n  font-size: 14px;\n  display: -webkit-flex;\n  color: @text-color;\n  background-color: @base-background-color;\n  padding: 10px;\n\n  ul {\n    padding-left: 0px;\n    width: 100%;\n  }\n\n  li {\n    list-style-type: none;\n  }\n\n  ul.stacktrace {\n    li {\n      color: #aaa;\n    }\n\n    li.clojure {\n      color: black;\n    }\n  }\n\n  ul.stacktrace {\n    border-left: solid red 3px;\n    padding-left: 10px;\n  }\n}\n\n.clojure.discard {\n  font-style: italic;\n}\n\n.debug-atom-clojure {\n  padding: 10px;\n  background-color: @tool-panel-background-color;\n  width: 100%;\n  height: 100%;\n  overflow-y: scroll;\n  color: @text-color;\n\n  h1 {\n    margin-top: 0;\n  }\n}\n\n.repl-entry {\n  border-top: solid @panel-heading-background-color 3px;\n  list-style-type: none;\n  margin-bottom: 20px;\n  position: relative;\n  background-color: @base-background-color;\n\n  .evald-form {\n    background-color: transparent;\n    padding: 5px;\n\n    code {\n      white-space: pre;\n      background-color: transparent;\n      color: #777;\n    }\n  }\n\n  .repl-entry-controls {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n  }\n\n  .output {\n    padding: 5px;\n  }\n}\n\n.raw-output {\n  width: 100%;\n}\n\n.rendered-output {\n  padding: 10px;\n  white-space: pre-wrap;\n}\n\n.toggle-raw {\n  text-align: center;\n  width: 100%;\n  background-color: @button-background-color;\n  padding: 3px;\n  cursor: pointer;\n  font-family: sans-serif;\n\n  &:hover {\n    background-color: @button-background-color-hover;\n  }\n}\n\n.connections-view {\n  padding: 10px;\n\n  h1 {\n    margin-top: 0px;\n  }\n}\n\n.atom-styleguide-view {\n  background-color: @app-background-color;\n  height: 100%;\n  padding: 20px;\n\n  h1 {\n    margin-top: 0px;\n  }\n}\n\n.styleguide-example-content {\n  @checker-color: #ccc;\n  @checker-size: 40px;\n  background-color: #eee;\n  background-image: linear-gradient(45deg, @checker-color 25%, transparent 25%, transparent 75%, @checker-color 75%, @checker-color),\n  linear-gradient(45deg, @checker-color 25%, transparent 25%, transparent 75%, @checker-color 75%, @checker-color);\n  background-size: @checker-size @checker-size;\n  background-position:0 0, @checker-size/2 @checker-size/2;\n\n  padding: 20px;\n}\n\n\n.data {\n  font-family: monospace;\n  font-size: 14px;\n\n  &.vector,\n  &.map {\n    padding: 5px;\n\n    ul {\n      padding-left: 10px;\n    }\n\n    li {\n      list-style-type: none;\n    }\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[154,22],[154,22]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6225,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"6":{"id":6,"range":[[39,0],[39,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[145,6],[161,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"14":{"id":14,"range":[[161,0],[161,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[157,7],[159,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[150,8],[156,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"17":{"id":17,"range":[[149,0],[149,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[153,7],[155,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/atom/atom-clojure/stylesheets/clojure.less","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1910cd49a8c8276910abf7ef9851b4aa79bee523","deserializer":"TextBuffer"},{"text":"(defproject atom-clojure \"0.1.0-SNAPSHOT\"\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [org.clojure/clojurescript \"0.0-2202\"]\n                 [com.cemerick/clojurescript.test \"0.3.1\"]\n                 [prismatic/plumbing \"0.3.1\"]\n                 [prismatic/om-tools \"0.2.1\"]\n                 [org.clojure/core.async \"0.1.303.0-886421-alpha\"]]\n  :plugins [[lein-cljsbuild \"1.0.3\"]\n            [org.bodil/lein-noderepl \"0.1.11\"]]\n  :cljsbuild {:builds\n              {:dev {:source-paths [\"cljs\" \"test/cljs\"]\n                     :compiler {:output-to \"cljsout/test.js\"\n                                :output-dir \"cljsout\"\n                                :optimizations :none\n                                :target :nodejs\n                                :source-map true}}}})\n","markers":{"markers":{"1":{"id":1,"range":[[8,12],[8,12]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":6275,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[8,41],[8,41]],"newRange":[[8,41],[9,0]],"oldText":"","newText":"\n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[9,0],[9,0]],"newRange":[[9,0],[9,12]],"oldText":"","newText":"            ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[9,12],[9,12]],"newRange":[[9,12],[9,46]],"oldText":"","newText":"[org.bodil/lein-noderepl \"0.1.11\"]","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":true,"range":[[8,0],[8,0]]},"newParams":{"reversed":false,"range":[[8,0],[8,41]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,0],[8,41]],"newRange":[[8,0],[8,0]],"oldText":"            [com.cemerick/austin \"0.1.4\"]","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[8,0],[8,0]]},"newParams":{"range":[[8,0],[9,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[8,0],[9,0]],"newRange":[[8,0],[8,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/zk/napplelabs/atom/atom-clojure/project.clj","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"05691ab7b461defef9e88fd2e171354d37adb026","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":6135,"softTabs":true,"displayBuffer":{"id":6136,"softWrap":false,"editorWidthInChars":178,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/styleguide.cljs","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":6221,"softTabs":true,"displayBuffer":{"id":6222,"softWrap":false,"editorWidthInChars":153,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/repl_view.cljs","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":6275,"softTabs":true,"displayBuffer":{"id":6276,"softWrap":false,"editorWidthInChars":153,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/atom/atom-clojure/project.clj","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":6225,"softTabs":true,"displayBuffer":{"id":6226,"softWrap":false,"editorWidthInChars":153,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/atom/atom-clojure/stylesheets/clojure.less","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":6139,"softTabs":true,"displayBuffer":{"id":6140,"softWrap":false,"editorWidthInChars":178,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/plugin.cljs","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/zk/napplelabs/atom/atom-clojure/project.clj","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["black","`","handle-open-uri","register-openers","serialize","deserialize","deserializer","register-deseri","register-deserializers","deser","nrepl-connect","connect-to","inc-col","char-at","prn","open-styleguide","styleguide-view","make-view","state","open-styleguide","open-connections-cmd","repl-entry","open","(.open","prn"],"replaceHistory":["atom/cursor-to!","atom/get-text!","atom/get-text","atom/set-text1","atom/set-text!","atom/char-at!","atom/transact!","atom/backspace!","#aaa"],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["collapse-whitespace","char-at","highlighting","match paren","highlight","brace.*highlight","brace","bracket","BracketMatcherView","char-at!","on-form-start?","on-form-end?","inside-form-start?","inside-form-end?","in-sexp?","next-form","serialize:","char-at!","icon-file-text"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":true,"caseSensitive":false}},"resultsModelState":{"useRegex":true,"caseSensitive":false}},"fuzzy-finder":{"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/styleguide.cljs":1404276181351,"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/repl_view.cljs":1404276214471,"/Users/zk/napplelabs/atom/atom-clojure/project.clj":1404276382725,"/Users/zk/napplelabs/atom/atom-clojure/stylesheets/clojure.less":1404244875636,"/Users/zk/napplelabs/atom/atom-clojure/cljs/cla/plugin.cljs":1404275308408},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":514964},"tree-view":{"directoryExpansionStates":{"atom-clojure":{"cljs":{"cla":{}}}},"selectedPath":"/Users/zk/napplelabs/atom/atom-clojure/project.clj","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"atom-clojure":{"nrepl-uris":null}}}