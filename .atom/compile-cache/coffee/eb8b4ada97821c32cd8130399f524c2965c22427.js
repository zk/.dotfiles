(function() {
  var ClojureView, NC, URL, connections, views, _;

  ClojureView = require('./clojure-view');

  URL = require('url');

  _ = require('underscore-plus');

  NC = require('nrepl-client');

  connections = {};

  views = {};

  module.exports = {
    clojureView: null,
    activate: function(state) {
      var uri;
      atom.workspaceView.command('nrepl:eval-selection', (function(_this) {
        return function() {
          var conn, ed, form, uri, view;
          ed = atom.workspace.getActiveEditor();
          form = ed.getSelection().getText();
          uri = _.chain(connections).keys().first();
          conn = connections[uri];
          view = views[uri];
          return conn["eval"](form, function(err, result) {
            return _.each(views, function(view) {
              view.output(err || result);
              return console.log(err || result);
            });
          });
        };
      })(this));
      atom.workspace.registerOpener((function(_this) {
        return function(uri) {
          var conn, expr, host, pathname, port, protocol, view, _ref;
          _ref = URL.parse(uri), protocol = _ref.protocol, host = _ref.host, port = _ref.port, pathname = _ref.pathname;
          if (protocol !== 'nrepl:') {
            return;
          }
          host = host.split(':')[0];
          conn = NC.connect({
            port: port,
            host: host
          });
          expr = '(+ 3 4)';
          conn.once('connect', function() {
            return connections[uri] = conn;
          });
          view = new ClojureView(uri);
          if (!editors[uri]) {
            views[uri] = [];
          }
          views[uri].push(view);
          return view;
        };
      })(this));
      uri = 'nrepl://127.0.0.1:62144';
      return atom.workspace.open(uri);
    },
    deactivate: function() {
      console.log('deactivate');
      return this.clojureView.destroy();
    },
    serialize: function() {
      return {
        clojureViewState: this.clojureView.serialize()
      };
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDJDQUFBOztBQUFBLEVBQUEsV0FBQSxHQUFjLE9BQUEsQ0FBUSxnQkFBUixDQUFkLENBQUE7O0FBQUEsRUFDQSxHQUFBLEdBQU0sT0FBQSxDQUFRLEtBQVIsQ0FETixDQUFBOztBQUFBLEVBRUEsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxpQkFBUixDQUZKLENBQUE7O0FBQUEsRUFHQSxFQUFBLEdBQUssT0FBQSxDQUFRLGNBQVIsQ0FITCxDQUFBOztBQUFBLEVBS0EsV0FBQSxHQUFjLEVBTGQsQ0FBQTs7QUFBQSxFQU1BLEtBQUEsR0FBUSxFQU5SLENBQUE7O0FBQUEsRUFRQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsSUFBQSxXQUFBLEVBQWEsSUFBYjtBQUFBLElBRUEsUUFBQSxFQUFVLFNBQUMsS0FBRCxHQUFBO0FBQ1IsVUFBQSxHQUFBO0FBQUEsTUFBQSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQW5CLENBQTJCLHNCQUEzQixFQUFtRCxDQUFBLFNBQUEsS0FBQSxHQUFBO2VBQUEsU0FBQSxHQUFBO0FBRWpELGNBQUEseUJBQUE7QUFBQSxVQUFBLEVBQUEsR0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWYsQ0FBQSxDQUFMLENBQUE7QUFBQSxVQUNBLElBQUEsR0FBTyxFQUFFLENBQUMsWUFBSCxDQUFBLENBQWlCLENBQUMsT0FBbEIsQ0FBQSxDQURQLENBQUE7QUFBQSxVQUdBLEdBQUEsR0FBTSxDQUFDLENBQUMsS0FBRixDQUFRLFdBQVIsQ0FDSixDQUFDLElBREcsQ0FBQSxDQUVKLENBQUMsS0FGRyxDQUFBLENBSE4sQ0FBQTtBQUFBLFVBT0EsSUFBQSxHQUFPLFdBQVksQ0FBQSxHQUFBLENBUG5CLENBQUE7QUFBQSxVQVFBLElBQUEsR0FBTyxLQUFNLENBQUEsR0FBQSxD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
//# sourceURL=/Users/zk/.atom/packages/clojure/lib/clojure.coffee