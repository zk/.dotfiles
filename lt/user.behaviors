;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "default")
              (:lt.objs.style/font-settings "Inconsolata" 11 1.2)
              :lt.objs.editor/line-numbers
              (:lt.plugins.reflow/set-width 72)]

     :editor.active []

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]
     :console [:ltscratch.console/no-wrap
               (:lt.objs.console/set-console-limit 5000)]
     :files [(:lt.objs.files/file-types [{:name "cljx" :exts [:cljx] :mime "text/x-clojure" :tags [:editor.clj]}])]
     :ltscratch.core/insp [:ltscratch.core/on-close]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro]
     :editor [:lt.plugins.auto-complete/auto-show-on-input
              :lt.objs.langs.behaviors/show-info-on-move
              :lt.objs.editor/hide-line-numbers]
     :window []}}
